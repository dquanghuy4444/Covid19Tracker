{"version":3,"sources":["App.module.css","components/Cards/Cards.module.css","components/Cards/CardItem.jsx","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","serviceWorker.js","index.js","components/CountryPicker/CountryPicker.module.css","images/image.png"],"names":["module","exports","CardItem","title","value","lastUpdate","description","style","classNameGridItem","cx","styles","card","Grid","item","component","Card","xs","md","className","CardContent","Typography","color","gutterBottom","variant","start","end","duration","separator","Date","toDateString","Cards","data","container","spacing","justify","confirmed","styles2","infected","recovered","deaths","axios","require","url","fetchData","country","a","changeableUrl","console","log","get","fetchCountries","countries","map","name","Chart","barChart","width","height","labels","datasets","label","backgroundColor","options","legend","display","text","Countries","onChangeCountry","useState","setCountries","useEffect","fetchAPI","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","props","setState","state","this","image","src","alt","CountryPicker","textAlign","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.91975f63.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3MVg3\",\"image\":\"App_image__Q9cmm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__1G6kr\",\"card\":\"Cards_card__2WNhR\",\"infected\":\"Cards_infected__3NeOg\",\"recovered\":\"Cards_recovered__1_yIT\",\"deaths\":\"Cards_deaths__21hBX\"};","import React from 'react';\r\nimport { Card , CardContent , Typography , Grid } from '@material-ui/core';\r\nimport styles from './Cards.module.css';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nfunction CardItem({title , value , lastUpdate , description , style}) {\r\n\r\n    var classNameGridItem = cx(styles.card , style)\r\n\r\n  return (\r\n    <Grid item component={ Card } xs={ 12 } md={ 3 } className={ classNameGridItem }>\r\n        <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n                { title }\r\n            </Typography>\r\n\r\n            <Typography variant=\"h5\">\r\n                <CountUp \r\n                start={ 0 } \r\n                end={ value.value }\r\n                duration={ 2.5 }\r\n                separator=\",\"\r\n                ></CountUp>\r\n            </Typography>\r\n\r\n            <Typography color=\"textSecondary\">\r\n                { new Date(lastUpdate).toDateString() }\r\n            </Typography>\r\n            \r\n            <Typography variant=\"body2\">\r\n                { description }\r\n            </Typography>\r\n\r\n        </CardContent>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default CardItem;\r\n","import React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport styles from './../../App.module.css';\r\nimport styles2 from './Cards.module.css';\r\nimport CardItem from './CardItem';\r\nfunction Cards({data}) {\r\n\r\n  return (\r\n    <div className={ styles.container }>\r\n      <Grid container spacing={ 3 } justify=\"center\">\r\n        <CardItem\r\n        title=\"Infected\"\r\n        value={ data.confirmed }\r\n        lastUpdate={ data.lastUpdate }\r\n        description=\"Number of active cases of COVID-19\"\r\n        style={ styles2.infected }\r\n        ></CardItem>\r\n        <CardItem\r\n        title=\"Recovered\"\r\n        value={ data.recovered }\r\n        lastUpdate={ data.lastUpdate }\r\n        description=\"Number of recoveries from COVID-19\"\r\n        style={ styles2.recovered }\r\n        ></CardItem>\r\n        <CardItem\r\n        title=\"Deaths\"\r\n        value={ data.deaths }\r\n        lastUpdate={ data.lastUpdate }\r\n        description=\"Number of deaths caused by COVID-19\"\r\n        style={ styles2.deaths }\r\n        ></CardItem>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Cards;\r\n","const axios = require('axios');\r\n\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async (country) => {\r\n  let changeableUrl = url;\r\n\r\n  if (country) {\r\n    changeableUrl = `${url}/countries/${country}`;\r\n    console.log(country);\r\n  }\r\n\r\n  try {\r\n    const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl);\r\n\r\n    return { confirmed, recovered, deaths, lastUpdate };\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nexport const fetchCountries = async () => {\r\n    try {\r\n      const { data: { countries } } = await axios.get(`${url}/countries`);\r\n  \r\n      return countries.map((country) => country.name);\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n};","import React , { useState , useEffect } from 'react';\r\nimport { fetchDataDaily } from './../../api/index';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\nimport styles from './../../App.module.css';\r\n\r\nfunction Chart({ data: { confirmed, recovered, deaths }, country }) {\r\n  \r\n\r\n  const barChart = (\r\n    confirmed ? (\r\n      <Bar\r\n        width=\"500\"\r\n        height=\"200\"\r\n        data={{\r\n          labels: ['Infected', 'Recovered', 'Deaths'],\r\n          datasets: [\r\n            {\r\n              label: 'People',\r\n              backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\r\n              data: [confirmed.value, recovered.value, deaths.value],\r\n            },\r\n          ],\r\n        }}\r\n        options={{\r\n          legend: { display: false },\r\n          title: { display: true, text: `Current state in ${country}` },\r\n        }}\r\n      />\r\n    ) : null\r\n  );\r\n\r\n  return (\r\n    <div className={ styles.container }>\r\n      { country ? barChart : null }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Chart;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\n\r\nimport { fetchCountries } from '../../api';\r\n\r\nimport styles from './CountryPicker.module.css';\r\n\r\nconst Countries = ({ onChangeCountry }) => {\r\n  const [countries, setCountries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setCountries(await fetchCountries());\r\n    };\r\n\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  return (\r\n    <FormControl className={styles.formControl}>\r\n      <NativeSelect defaultValue=\"\" onChange={(e) => onChangeCountry(e.target.value)}>\r\n        <option value=\"\">-- Select Country --</option>\r\n        {countries.map((country, i) => <option key={i} value={country}>{country}</option>)}\r\n      </NativeSelect>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default Countries;\r\n","import React, { Component } from 'react';\nimport styles from  './App.module.css';\nimport { Cards , Chart , CountryPicker } from './components';\nimport { fetchData } from './api/index';\nimport image from './images/image.png';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      data : {},\n      country : '',\n    }\n  }\n\n  async componentDidMount()\n  {\n    const data = await fetchData();\n    this.setState({\n      data\n    });\n  }\n\n  onChangeCountry = async (country) => {\n    const data = await fetchData(country);\n\n    this.setState({ data, country: country });\n  }\n  \n\n  render() {\n    const { data, country } = this.state;\n\n    if(!data.confirmed)\n    {\n      return (\n        <h2 style={{ textAlign : \"center\" }}>\n          Loading ....\n        </h2>\n      );\n    }\n    return (\n      <div className={ styles.container }>\n        <img className={styles.image} src={image} alt=\"COVID-19\" />\n        <Cards data={ data }></Cards>\n        <CountryPicker onChangeCountry={ this.onChangeCountry }></CountryPicker>\n        <Chart data={data} country={country} /> \n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__Zro0y\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}